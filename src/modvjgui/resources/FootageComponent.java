/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package modvjgui.resources;

import javax.swing.BoxLayout;
import modvjgui.core.TestSketch;
import modvjgui.core.Effect;
import modvjgui.core.IEventListener;
import modvjgui.core.Event;
import processing.core.*;

import javax.swing.event.EventListenerList;
import modvjgui.core.IFootageComponent;

/**
 *
 * @author User
 */
public class FootageComponent extends javax.swing.JPanel implements IFootageComponent{
  TestSketch testSketch;
  
  protected EventListenerList initListenerList, selectListenerList, deselectListenerList;

    public void initialize(){
        
        initListenerList = new EventListenerList();
        selectListenerList = new EventListenerList();
        deselectListenerList = new EventListenerList();

        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));


        //TODO: дописать
        testSketch = new TestSketch();
        add(testSketch);
        testSketch.init();

        testSketch.addInitEventListener(new IEventListener(){
            @Override
            public void eventOccurred(Event evt){

                //System.out.println("Sketch: --> " + effectQueue);

                testSketch.removeInitEventListener(this);
                add(testSketch.controlPanel);
                revalidate();
                fireInitEvent(new Event(this));
            }
        });

        testSketch.addSelectEventListener(new IEventListener(){
            @Override
            public void eventOccurred(Event evt){
                fireSelectEvent(new Event(this));
            }
        });        
    }
    /**
     * Creates new form FootageComponent
     */
    public FootageComponent() {
        
        initComponents();
  
             
    }
  public void clear()
  {
    if(testSketch != null)
    {
      testSketch.clear();
      testSketch.stop();
      testSketch.dispose();
      testSketch = null;
      removeAll();
      revalidate();
    }
  }
  
  public void deselect()
  {
    testSketch.deselect();
    fireDeselectEvent(new Event(this));
  }
  
  
  public void setEffectQueue(Effect[] effectQueue)
  {
    //System.out.println("Sketch: --> " + effectQueue);
    testSketch.effectQueue = effectQueue;
  }
  
  
  public PImage getImage()
  {
    return testSketch.getImage();
  }
  
  //------------------------------------------------------------------
  public void addInitEventListener(IEventListener listener) 
  {
      try {
        initListenerList.add(IEventListener.class, listener);
      }
      catch (NullPointerException oException){
          System.out.printf(oException.getMessage());
      }
  }
  
  public void removeInitEventListener(IEventListener listener) 
  {
    initListenerList.remove(IEventListener.class, listener);
  }
  
  void fireInitEvent(Event evt) 
  {
    Object[] listeners = initListenerList.getListenerList();
    for (int i=0; i<listeners.length; i+=2) 
    {
      if (listeners[i] == IEventListener.class) 
      {
        ((IEventListener)listeners[i+1]).eventOccurred(evt);
       }
     }   
  }
  
  //------------------------------------------------------------------
  public void addSelectEventListener(IEventListener listener) 
  {
    selectListenerList.add(IEventListener.class, listener);
  }
  
  public void removeSelectEventListener(IEventListener listener) 
  {
    selectListenerList.remove(IEventListener.class, listener);
  }
  
  void fireSelectEvent(Event evt) 
  {
    Object[] listeners = selectListenerList.getListenerList();
    for (int i=0; i<listeners.length; i+=2) 
    {
      if (listeners[i] == IEventListener.class) 
      {
        ((IEventListener)listeners[i+1]).eventOccurred(evt);
       }
     }   
  }
  
  //------------------------------------------------------------------
  public void addDeselectEventListener(IEventListener listener) 
  {
    deselectListenerList.add(IEventListener.class, listener);
  }
  
  public void removeDeselectEventListener(IEventListener listener) 
  {
    deselectListenerList.remove(IEventListener.class, listener);
  }
  
  void fireDeselectEvent(Event evt) 
  {
    Object[] listeners = deselectListenerList.getListenerList();
    for (int i=0; i<listeners.length; i+=2) 
    {
      if (listeners[i] == IEventListener.class) 
      {
        ((IEventListener)listeners[i+1]).eventOccurred(evt);
       }
     }   
  }
  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(128, 155));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(128, 128, 128)));
        jPanel1.setPreferredSize(new java.awt.Dimension(128, 72));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        jButton3.setText("Select");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton1.setText("Open");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:



    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked


    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
    
    }//GEN-LAST:event_jButton2MouseClicked

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
            //some(); 
            //revalidate();
    }//GEN-LAST:event_formComponentAdded
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

}
